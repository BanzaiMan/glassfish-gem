############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.

# In glassfish, it is not a good idea to add handlers this way
# as it requires the handler to be on the system classpath.
# A better approach is to define an HK2 component wich implements
# the Hanlder contract :
#
# @Service(name="console")
# @ContractProvided(Handler.class)
# public class MyConsoleHandler implements Handler {
#      // implementation of Handler interface
# }

handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# this is the default hanlder for Glassfish, it writes to a log file
# The handler is not registered through the handlers property above
# because the implementation is not on the system class path. 
# GlassFish will register this handler automtically as it is 
# and HK2 component like described above.
# rotates the file based on time or size.
com.sun.enterprise.server.logging.FileandSyslogHandler.file=${jruby.log.location}
# rotation time in minutes (takes precedence on size if defined),
# 0 for no rotation based on time
com.sun.enterprise.server.logging.FileandSyslogHandler.rotationTimelimitInMinutes=0
# rotation limit in bytes, 0 means no rotation, 500000 is the minimum
com.sun.enterprise.server.logging.FileandSyslogHandler.rotationLimitInBytes=0
# formatter used to format the log records in the server log file
com.sun.enterprise.server.logging.FileandSyslogHandler.formatter=com.sun.enterprise.server.logging.UniformLogFormatter


# default file output is in user's home directory.
java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = com.sun.enterprise.server.logging.UniformLogFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level = SEVERE

#Some logger names for v3 are below just uncoment the line logger below and save the file.  The logging code will automatically be reconfigured. 
#ROOTLOGGER
#javax.enterprise.level=FINE
#Tools Logger
#javax.enterprise.system.tools.level=FINE
# EJB Logger
#javax.enterprise.system.container.ejb.level=FINE
#JAVAMAIL_LOGGER
#javax.enterprise.resource.javamail.level=FINE
#JMS_LOGGER
#javax.enterprise.resource.jms.level=FINE
#WEB LOGGER
#javax.enterprise.system.container.web.level=FINE
#CMP_LOGGER
#javax.enterprise.system.container.cmp.level=FINE
#JDO_LOGGER
#javax.enterprise.resource.jdo.level=FINE
#ACC_LOGGER
#javax.enterprise.system.container.appclient.level=FINE
#MDB_LOGGER
#javax.enterprise.system.container.ejb.mdb.level=FINE
#SECURITY LOGGER 
#javax.enterprise.system.core.security.level=FINE
#TRANSACTION_LOGGER
#javax.enterprise.system.core.transaction.level=FINE
#CORBA_LOGGER
#javax.enterprise.resource.corba.level=FINE
#ADMIN LOGGER
#javax.enterprise.system.tools.admin.level=FINE
#DPL_LOGGER - deployment logger
#javax.enterprise.system.tools.deployment.level=FINE
#SAAJ_LOGGER
#javax.enterprise.system.webservices.saaj.level=FINE
#UTIL_LOGGER
#javax.enterprise.system.util.level=FINE
#NAMING_LOGGER
#javax.enterprise.system.core.naming.level=FINE
#CORE_LOGGER
#javax.enterprise.system.core.level=FINE
#LOADER_LOGGER
#javax.enterprise.system.core.classloading.level=FINE
#CONFIG_LOGGER
#javax.enterprise.system.core.config.level=FINE
#AMX_LOGGER
#javax.enterprise.system.AMX.level=FINE


